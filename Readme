OracleDB + Node.js Project
This project demonstrates how to connect a Node.js application to an Oracle Database 21c XE using the oracledb library. It includes a simple use case for inserting and retrieving user data.
üìÅ Project Structure

üßë‚Äçüíª Prerequisites

Node.js (v18 or higher recommended)
Oracle Database XE 21c
Oracle client libraries (thin mode supported; no Instant Client required for recent oracledb versions)

üì¶ Installation

Clone this repository:

git clone https://github.com/your-username/oracle-node-project.git
cd oracle-node-project


Install dependencies:

npm install


Ensure the Oracle Database XE service is running (example for Windows PowerShell):

Get-Service OracleServiceXE

üóÑÔ∏è Database Setup (SQL*Plus)
Start SQL*Plus:
sqlplus SYSTEM/your-password@XE

Create a table and insert sample data:
CREATE TABLE users (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR2(100),
  phone_number VARCHAR2(15),
  PRIMARY KEY (id)
);

INSERT INTO users (name, phone_number)
VALUES ('Abhijeet', '+919075180122');

COMMIT;

üìú index.js
const oracledb = require('oracledb');

async function sendOTPToUser() {
  try {
    const connection = await oracledb.getConnection({
      user: 'SYSTEM',
      password: 'your-password',
      connectString: 'localhost/XE'
    });

    const result = await connection.execute(`SELECT name, phone_number FROM users`);
    for (const row of result.rows) {
      console.log(`Name: ${row[0]}\nPhone: ${row[1]}`);
    }

    await connection.close();
  } catch (err) {
    console.error('DB Error:', err);
  }
}

sendOTPToUser();

‚ñ∂Ô∏è Run the Project
node index.js

üß† Troubleshooting

If you encounter ORA-00942: table or view does not exist, verify:
You're connected as the correct user (e.g., SYSTEM or the table owner).
The users table exists (check with SELECT * FROM user_tables; in SQL*Plus).



üìÑ License
This project is licensed under the MIT License.
‚ú® Author
Abhijeet Rathod
